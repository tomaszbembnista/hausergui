/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("BasicErrorControllerApi", () => {
  let instance: api.BasicErrorControllerApi
  beforeEach(function() {
    instance = new api.BasicErrorControllerApi(config)
  });

  test("errorHtmlUsingDELETE", () => {
    return expect(instance.errorHtmlUsingDELETE({})).resolves.toBe(null)
  })
  test("errorHtmlUsingGET", () => {
    return expect(instance.errorHtmlUsingGET({})).resolves.toBe(null)
  })
  test("errorHtmlUsingHEAD", () => {
    return expect(instance.errorHtmlUsingHEAD({})).resolves.toBe(null)
  })
  test("errorHtmlUsingOPTIONS", () => {
    return expect(instance.errorHtmlUsingOPTIONS({})).resolves.toBe(null)
  })
  test("errorHtmlUsingPATCH", () => {
    return expect(instance.errorHtmlUsingPATCH({})).resolves.toBe(null)
  })
  test("errorHtmlUsingPOST", () => {
    return expect(instance.errorHtmlUsingPOST({})).resolves.toBe(null)
  })
  test("errorHtmlUsingPUT", () => {
    return expect(instance.errorHtmlUsingPUT({})).resolves.toBe(null)
  })
})

describe("DeviceResourceApi", () => {
  let instance: api.DeviceResourceApi
  beforeEach(function() {
    instance = new api.DeviceResourceApi(config)
  });

  test("createDeviceUsingPOST", () => {
    const body: api.DeviceDTO = undefined
    return expect(instance.createDeviceUsingPOST(body, {})).resolves.toBe(null)
  })
  test("deleteDeviceUsingDELETE", () => {
    const id: number = 789
    return expect(instance.deleteDeviceUsingDELETE(id, {})).resolves.toBe(null)
  })
  test("getDeviceUsingGET", () => {
    const id: number = 789
    return expect(instance.getDeviceUsingGET(id, {})).resolves.toBe(null)
  })
  test("getDevicesUsingGET", () => {
    return expect(instance.getDevicesUsingGET({})).resolves.toBe(null)
  })
  test("getOutputProcessingChainsUsingGET", () => {
    const id: number = 789
    return expect(instance.getOutputProcessingChainsUsingGET(id, {})).resolves.toBe(null)
  })
  test("updateDeviceUsingPUT", () => {
    const body: api.DeviceDTO = undefined
    return expect(instance.updateDeviceUsingPUT(body, {})).resolves.toBe(null)
  })
})

describe("PluginResourceApi", () => {
  let instance: api.PluginResourceApi
  beforeEach(function() {
    instance = new api.PluginResourceApi(config)
  });

  test("getPluginDocumentationUsingGET", () => {
    const className: string = "className_example"
    return expect(instance.getPluginDocumentationUsingGET(className, {})).resolves.toBe(null)
  })
  test("getPluginUsingGET", () => {
    const className: string = "className_example"
    return expect(instance.getPluginUsingGET(className, {})).resolves.toBe(null)
  })
  test("getPluginsUsingGET", () => {
    return expect(instance.getPluginsUsingGET({})).resolves.toBe(null)
  })
})

describe("ProcessingChainResourceApi", () => {
  let instance: api.ProcessingChainResourceApi
  beforeEach(function() {
    instance = new api.ProcessingChainResourceApi(config)
  });

  test("createProcessingChainUsingPOST", () => {
    const body: api.ProcessingChainDTO = undefined
    return expect(instance.createProcessingChainUsingPOST(body, {})).resolves.toBe(null)
  })
  test("deleteProcessingChainStepUsingDELETE", () => {
    const id: number = 789
    return expect(instance.deleteProcessingChainStepUsingDELETE(id, {})).resolves.toBe(null)
  })
  test("getProcessingChainStepsUsingGET", () => {
    const id: number = 789
    return expect(instance.getProcessingChainStepsUsingGET(id, {})).resolves.toBe(null)
  })
  test("getProcessingChainUsingGET", () => {
    const id: number = 789
    return expect(instance.getProcessingChainUsingGET(id, {})).resolves.toBe(null)
  })
  test("getProcessingChainsUsingGET", () => {
    return expect(instance.getProcessingChainsUsingGET({})).resolves.toBe(null)
  })
  test("updateProcessingChainUsingPUT", () => {
    const body: api.ProcessingChainDTO = undefined
    return expect(instance.updateProcessingChainUsingPUT(body, {})).resolves.toBe(null)
  })
})

describe("SignalProcessorResourceApi", () => {
  let instance: api.SignalProcessorResourceApi
  beforeEach(function() {
    instance = new api.SignalProcessorResourceApi(config)
  });

  test("createSignalProcessorUsingPOST", () => {
    const body: api.SignalProcessorDTO = undefined
    return expect(instance.createSignalProcessorUsingPOST(body, {})).resolves.toBe(null)
  })
  test("deleteSignalProcessorUsingDELETE", () => {
    const id: number = 789
    return expect(instance.deleteSignalProcessorUsingDELETE(id, {})).resolves.toBe(null)
  })
  test("executeSignalProcessorOperationsUsingPUT", () => {
    const body: Array<api.ProcessorOperationArgument> = undefined
    const id: number = 789
    const name: string = "name_example"
    return expect(instance.executeSignalProcessorOperationsUsingPUT(body, id, name, {})).resolves.toBe(null)
  })
  test("getSignalProcessorOperationsUsingGET", () => {
    const id: number = 789
    return expect(instance.getSignalProcessorOperationsUsingGET(id, {})).resolves.toBe(null)
  })
  test("getSignalProcessorUsingGET", () => {
    const id: number = 789
    return expect(instance.getSignalProcessorUsingGET(id, {})).resolves.toBe(null)
  })
  test("getSignalProcessorsUsingGET", () => {
    return expect(instance.getSignalProcessorsUsingGET({})).resolves.toBe(null)
  })
  test("updateSignalProcessorUsingPUT", () => {
    const body: api.SignalProcessorDTO = undefined
    return expect(instance.updateSignalProcessorUsingPUT(body, {})).resolves.toBe(null)
  })
})

describe("SpaceResourceApi", () => {
  let instance: api.SpaceResourceApi
  beforeEach(function() {
    instance = new api.SpaceResourceApi(config)
  });

  test("createSpaceUsingPOST", () => {
    const body: api.SpaceDTO = undefined
    return expect(instance.createSpaceUsingPOST(body, {})).resolves.toBe(null)
  })
  test("deleteSpaceUsingDELETE", () => {
    const id: number = 789
    return expect(instance.deleteSpaceUsingDELETE(id, {})).resolves.toBe(null)
  })
  test("getDevicesBelongingToSpaceUsingGET", () => {
    const id: number = 789
    return expect(instance.getDevicesBelongingToSpaceUsingGET(id, {})).resolves.toBe(null)
  })
  test("getSpaceUsingGET", () => {
    const id: number = 789
    return expect(instance.getSpaceUsingGET(id, {})).resolves.toBe(null)
  })
  test("getSpacesBelongingToSpaceUsingGET", () => {
    const id: number = 789
    return expect(instance.getSpacesBelongingToSpaceUsingGET(id, {})).resolves.toBe(null)
  })
  test("getSpacesUsingGET", () => {
    return expect(instance.getSpacesUsingGET({})).resolves.toBe(null)
  })
  test("updateSpaceUsingPUT", () => {
    const body: api.SpaceDTO = undefined
    return expect(instance.updateSpaceUsingPUT(body, {})).resolves.toBe(null)
  })
})


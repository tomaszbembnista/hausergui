/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ModelAndView,
    ModelAndViewFromJSON,
    ModelAndViewToJSON,
} from '../models';

/**
 * 
 */
export class BasicErrorControllerApi extends runtime.BaseAPI {

    /**
     * errorHtml
     */
    async errorHtmlUsingDELETERaw(): Promise<runtime.ApiResponse<ModelAndView>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/error`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAndViewFromJSON(jsonValue));
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingDELETE(): Promise<ModelAndView> {
        const response = await this.errorHtmlUsingDELETERaw();
        return await response.value();
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingGETRaw(): Promise<runtime.ApiResponse<ModelAndView>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/error`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAndViewFromJSON(jsonValue));
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingGET(): Promise<ModelAndView> {
        const response = await this.errorHtmlUsingGETRaw();
        return await response.value();
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingHEADRaw(): Promise<runtime.ApiResponse<ModelAndView>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/error`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAndViewFromJSON(jsonValue));
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingHEAD(): Promise<ModelAndView> {
        const response = await this.errorHtmlUsingHEADRaw();
        return await response.value();
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingOPTIONSRaw(): Promise<runtime.ApiResponse<ModelAndView>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/error`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAndViewFromJSON(jsonValue));
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingOPTIONS(): Promise<ModelAndView> {
        const response = await this.errorHtmlUsingOPTIONSRaw();
        return await response.value();
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingPATCHRaw(): Promise<runtime.ApiResponse<ModelAndView>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/error`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAndViewFromJSON(jsonValue));
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingPATCH(): Promise<ModelAndView> {
        const response = await this.errorHtmlUsingPATCHRaw();
        return await response.value();
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingPOSTRaw(): Promise<runtime.ApiResponse<ModelAndView>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/error`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAndViewFromJSON(jsonValue));
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingPOST(): Promise<ModelAndView> {
        const response = await this.errorHtmlUsingPOSTRaw();
        return await response.value();
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingPUTRaw(): Promise<runtime.ApiResponse<ModelAndView>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/error`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAndViewFromJSON(jsonValue));
    }

    /**
     * errorHtml
     */
    async errorHtmlUsingPUT(): Promise<ModelAndView> {
        const response = await this.errorHtmlUsingPUTRaw();
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PluginDTO,
    PluginDTOFromJSON,
    PluginDTOToJSON,
    StringWrapper,
    StringWrapperFromJSON,
    StringWrapperToJSON,
} from '../models';

export interface GetPluginDocumentationUsingGETRequest {
    className: string;
}

export interface GetPluginUsingGETRequest {
    className: string;
}

/**
 * 
 */
export class PluginResourceApi extends runtime.BaseAPI {

    /**
     * getPluginDocumentation
     */
    async getPluginDocumentationUsingGETRaw(requestParameters: GetPluginDocumentationUsingGETRequest): Promise<runtime.ApiResponse<StringWrapper>> {
        if (requestParameters.className === null || requestParameters.className === undefined) {
            throw new runtime.RequiredError('className','Required parameter requestParameters.className was null or undefined when calling getPluginDocumentationUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{className}/documentation`.replace(`{${"className"}}`, encodeURIComponent(String(requestParameters.className))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StringWrapperFromJSON(jsonValue));
    }

    /**
     * getPluginDocumentation
     */
    async getPluginDocumentationUsingGET(requestParameters: GetPluginDocumentationUsingGETRequest): Promise<StringWrapper> {
        const response = await this.getPluginDocumentationUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getPlugin
     */
    async getPluginUsingGETRaw(requestParameters: GetPluginUsingGETRequest): Promise<runtime.ApiResponse<PluginDTO>> {
        if (requestParameters.className === null || requestParameters.className === undefined) {
            throw new runtime.RequiredError('className','Required parameter requestParameters.className was null or undefined when calling getPluginUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{className}`.replace(`{${"className"}}`, encodeURIComponent(String(requestParameters.className))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginDTOFromJSON(jsonValue));
    }

    /**
     * getPlugin
     */
    async getPluginUsingGET(requestParameters: GetPluginUsingGETRequest): Promise<PluginDTO> {
        const response = await this.getPluginUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getPlugins
     */
    async getPluginsUsingGETRaw(): Promise<runtime.ApiResponse<Array<PluginDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PluginDTOFromJSON));
    }

    /**
     * getPlugins
     */
    async getPluginsUsingGET(): Promise<Array<PluginDTO>> {
        const response = await this.getPluginsUsingGETRaw();
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProcessingChainDTO,
    ProcessingChainDTOFromJSON,
    ProcessingChainDTOToJSON,
} from '../models';

export interface CreateProcessingChainUsingPOSTRequest {
    processingChainDTO: ProcessingChainDTO;
}

export interface DeleteProcessingChainStepUsingDELETERequest {
    id: number;
}

export interface GetProcessingChainStepsUsingGETRequest {
    id: number;
}

export interface GetProcessingChainUsingGETRequest {
    id: number;
}

export interface UpdateProcessingChainUsingPUTRequest {
    processingChainDTO: ProcessingChainDTO;
}

/**
 * 
 */
export class ProcessingChainResourceApi extends runtime.BaseAPI {

    /**
     * createProcessingChain
     */
    async createProcessingChainUsingPOSTRaw(requestParameters: CreateProcessingChainUsingPOSTRequest): Promise<runtime.ApiResponse<ProcessingChainDTO>> {
        if (requestParameters.processingChainDTO === null || requestParameters.processingChainDTO === undefined) {
            throw new runtime.RequiredError('processingChainDTO','Required parameter requestParameters.processingChainDTO was null or undefined when calling createProcessingChainUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/processing-chains`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessingChainDTOToJSON(requestParameters.processingChainDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessingChainDTOFromJSON(jsonValue));
    }

    /**
     * createProcessingChain
     */
    async createProcessingChainUsingPOST(requestParameters: CreateProcessingChainUsingPOSTRequest): Promise<ProcessingChainDTO> {
        const response = await this.createProcessingChainUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteProcessingChainStep
     */
    async deleteProcessingChainStepUsingDELETERaw(requestParameters: DeleteProcessingChainStepUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProcessingChainStepUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/processing-chains/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteProcessingChainStep
     */
    async deleteProcessingChainStepUsingDELETE(requestParameters: DeleteProcessingChainStepUsingDELETERequest): Promise<void> {
        await this.deleteProcessingChainStepUsingDELETERaw(requestParameters);
    }

    /**
     * getProcessingChainSteps
     */
    async getProcessingChainStepsUsingGETRaw(requestParameters: GetProcessingChainStepsUsingGETRequest): Promise<runtime.ApiResponse<Array<ProcessingChainDTO>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProcessingChainStepsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/processing-chains/{id}/steps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessingChainDTOFromJSON));
    }

    /**
     * getProcessingChainSteps
     */
    async getProcessingChainStepsUsingGET(requestParameters: GetProcessingChainStepsUsingGETRequest): Promise<Array<ProcessingChainDTO>> {
        const response = await this.getProcessingChainStepsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getProcessingChain
     */
    async getProcessingChainUsingGETRaw(requestParameters: GetProcessingChainUsingGETRequest): Promise<runtime.ApiResponse<ProcessingChainDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProcessingChainUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/processing-chains/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessingChainDTOFromJSON(jsonValue));
    }

    /**
     * getProcessingChain
     */
    async getProcessingChainUsingGET(requestParameters: GetProcessingChainUsingGETRequest): Promise<ProcessingChainDTO> {
        const response = await this.getProcessingChainUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getProcessingChains
     */
    async getProcessingChainsUsingGETRaw(): Promise<runtime.ApiResponse<Array<ProcessingChainDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/processing-chains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessingChainDTOFromJSON));
    }

    /**
     * getProcessingChains
     */
    async getProcessingChainsUsingGET(): Promise<Array<ProcessingChainDTO>> {
        const response = await this.getProcessingChainsUsingGETRaw();
        return await response.value();
    }

    /**
     * updateProcessingChain
     */
    async updateProcessingChainUsingPUTRaw(requestParameters: UpdateProcessingChainUsingPUTRequest): Promise<runtime.ApiResponse<ProcessingChainDTO>> {
        if (requestParameters.processingChainDTO === null || requestParameters.processingChainDTO === undefined) {
            throw new runtime.RequiredError('processingChainDTO','Required parameter requestParameters.processingChainDTO was null or undefined when calling updateProcessingChainUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/processing-chains`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessingChainDTOToJSON(requestParameters.processingChainDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessingChainDTOFromJSON(jsonValue));
    }

    /**
     * updateProcessingChain
     */
    async updateProcessingChainUsingPUT(requestParameters: UpdateProcessingChainUsingPUTRequest): Promise<ProcessingChainDTO> {
        const response = await this.updateProcessingChainUsingPUTRaw(requestParameters);
        return await response.value();
    }

}

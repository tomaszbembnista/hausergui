/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProcessorOperationArgument,
    ProcessorOperationArgumentFromJSON,
    ProcessorOperationArgumentToJSON,
    ProcessorOperationDesc,
    ProcessorOperationDescFromJSON,
    ProcessorOperationDescToJSON,
    SignalProcessorDTO,
    SignalProcessorDTOFromJSON,
    SignalProcessorDTOToJSON,
} from '../models';

export interface CreateSignalProcessorUsingPOSTRequest {
    signalProcessor: SignalProcessorDTO;
}

export interface DeleteSignalProcessorUsingDELETERequest {
    id: number;
}

export interface ExecuteSignalProcessorOperationsUsingPUTRequest {
    id: number;
    name: string;
    operationArguments: Array<ProcessorOperationArgument>;
}

export interface GetSignalProcessorOperationsUsingGETRequest {
    id: number;
}

export interface GetSignalProcessorUsingGETRequest {
    id: number;
}

export interface UpdateSignalProcessorUsingPUTRequest {
    space: SignalProcessorDTO;
}

/**
 * 
 */
export class SignalProcessorResourceApi extends runtime.BaseAPI {

    /**
     * createSignalProcessor
     */
    async createSignalProcessorUsingPOSTRaw(requestParameters: CreateSignalProcessorUsingPOSTRequest): Promise<runtime.ApiResponse<SignalProcessorDTO>> {
        if (requestParameters.signalProcessor === null || requestParameters.signalProcessor === undefined) {
            throw new runtime.RequiredError('signalProcessor','Required parameter requestParameters.signalProcessor was null or undefined when calling createSignalProcessorUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/signal-processors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignalProcessorDTOToJSON(requestParameters.signalProcessor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalProcessorDTOFromJSON(jsonValue));
    }

    /**
     * createSignalProcessor
     */
    async createSignalProcessorUsingPOST(requestParameters: CreateSignalProcessorUsingPOSTRequest): Promise<SignalProcessorDTO> {
        const response = await this.createSignalProcessorUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteSignalProcessor
     */
    async deleteSignalProcessorUsingDELETERaw(requestParameters: DeleteSignalProcessorUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSignalProcessorUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/signal-processors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteSignalProcessor
     */
    async deleteSignalProcessorUsingDELETE(requestParameters: DeleteSignalProcessorUsingDELETERequest): Promise<void> {
        await this.deleteSignalProcessorUsingDELETERaw(requestParameters);
    }

    /**
     * executeSignalProcessorOperations
     */
    async executeSignalProcessorOperationsUsingPUTRaw(requestParameters: ExecuteSignalProcessorOperationsUsingPUTRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling executeSignalProcessorOperationsUsingPUT.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling executeSignalProcessorOperationsUsingPUT.');
        }

        if (requestParameters.operationArguments === null || requestParameters.operationArguments === undefined) {
            throw new runtime.RequiredError('operationArguments','Required parameter requestParameters.operationArguments was null or undefined when calling executeSignalProcessorOperationsUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/signal-processors/{id}/operations/{name}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.operationArguments.map(ProcessorOperationArgumentToJSON),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * executeSignalProcessorOperations
     */
    async executeSignalProcessorOperationsUsingPUT(requestParameters: ExecuteSignalProcessorOperationsUsingPUTRequest): Promise<string> {
        const response = await this.executeSignalProcessorOperationsUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getSignalProcessorOperations
     */
    async getSignalProcessorOperationsUsingGETRaw(requestParameters: GetSignalProcessorOperationsUsingGETRequest): Promise<runtime.ApiResponse<Array<ProcessorOperationDesc>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSignalProcessorOperationsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/signal-processors/{id}/operations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessorOperationDescFromJSON));
    }

    /**
     * getSignalProcessorOperations
     */
    async getSignalProcessorOperationsUsingGET(requestParameters: GetSignalProcessorOperationsUsingGETRequest): Promise<Array<ProcessorOperationDesc>> {
        const response = await this.getSignalProcessorOperationsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getSignalProcessor
     */
    async getSignalProcessorUsingGETRaw(requestParameters: GetSignalProcessorUsingGETRequest): Promise<runtime.ApiResponse<SignalProcessorDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSignalProcessorUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/signal-processors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalProcessorDTOFromJSON(jsonValue));
    }

    /**
     * getSignalProcessor
     */
    async getSignalProcessorUsingGET(requestParameters: GetSignalProcessorUsingGETRequest): Promise<SignalProcessorDTO> {
        const response = await this.getSignalProcessorUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getSignalProcessors
     */
    async getSignalProcessorsUsingGETRaw(): Promise<runtime.ApiResponse<Array<SignalProcessorDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/signal-processors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SignalProcessorDTOFromJSON));
    }

    /**
     * getSignalProcessors
     */
    async getSignalProcessorsUsingGET(): Promise<Array<SignalProcessorDTO>> {
        const response = await this.getSignalProcessorsUsingGETRaw();
        return await response.value();
    }

    /**
     * updateSignalProcessor
     */
    async updateSignalProcessorUsingPUTRaw(requestParameters: UpdateSignalProcessorUsingPUTRequest): Promise<runtime.ApiResponse<SignalProcessorDTO>> {
        if (requestParameters.space === null || requestParameters.space === undefined) {
            throw new runtime.RequiredError('space','Required parameter requestParameters.space was null or undefined when calling updateSignalProcessorUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/signal-processors`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SignalProcessorDTOToJSON(requestParameters.space),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalProcessorDTOFromJSON(jsonValue));
    }

    /**
     * updateSignalProcessor
     */
    async updateSignalProcessorUsingPUT(requestParameters: UpdateSignalProcessorUsingPUTRequest): Promise<SignalProcessorDTO> {
        const response = await this.updateSignalProcessorUsingPUTRaw(requestParameters);
        return await response.value();
    }

}

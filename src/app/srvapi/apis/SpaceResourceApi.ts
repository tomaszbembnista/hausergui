/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeviceDTO,
    DeviceDTOFromJSON,
    DeviceDTOToJSON,
    SpaceDTO,
    SpaceDTOFromJSON,
    SpaceDTOToJSON,
} from '../models';

export interface CreateSpaceUsingPOSTRequest {
    space: SpaceDTO;
}

export interface DeleteSpaceUsingDELETERequest {
    id: number;
}

export interface GetDevicesBelongingToSpaceUsingGETRequest {
    id: number;
}

export interface GetSpaceUsingGETRequest {
    id: number;
}

export interface GetSpacesBelongingToSpaceUsingGETRequest {
    id: number;
}

export interface UpdateSpaceUsingPUTRequest {
    space: SpaceDTO;
}

/**
 * 
 */
export class SpaceResourceApi extends runtime.BaseAPI {

    /**
     * createSpace
     */
    async createSpaceUsingPOSTRaw(requestParameters: CreateSpaceUsingPOSTRequest): Promise<runtime.ApiResponse<SpaceDTO>> {
        if (requestParameters.space === null || requestParameters.space === undefined) {
            throw new runtime.RequiredError('space','Required parameter requestParameters.space was null or undefined when calling createSpaceUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/spaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SpaceDTOToJSON(requestParameters.space),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceDTOFromJSON(jsonValue));
    }

    /**
     * createSpace
     */
    async createSpaceUsingPOST(requestParameters: CreateSpaceUsingPOSTRequest): Promise<SpaceDTO> {
        const response = await this.createSpaceUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteSpace
     */
    async deleteSpaceUsingDELETERaw(requestParameters: DeleteSpaceUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSpaceUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/spaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteSpace
     */
    async deleteSpaceUsingDELETE(requestParameters: DeleteSpaceUsingDELETERequest): Promise<void> {
        await this.deleteSpaceUsingDELETERaw(requestParameters);
    }

    /**
     * getDevicesBelongingToSpace
     */
    async getDevicesBelongingToSpaceUsingGETRaw(requestParameters: GetDevicesBelongingToSpaceUsingGETRequest): Promise<runtime.ApiResponse<Array<DeviceDTO>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDevicesBelongingToSpaceUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/spaces/{id}/devices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceDTOFromJSON));
    }

    /**
     * getDevicesBelongingToSpace
     */
    async getDevicesBelongingToSpaceUsingGET(requestParameters: GetDevicesBelongingToSpaceUsingGETRequest): Promise<Array<DeviceDTO>> {
        const response = await this.getDevicesBelongingToSpaceUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getSpace
     */
    async getSpaceUsingGETRaw(requestParameters: GetSpaceUsingGETRequest): Promise<runtime.ApiResponse<SpaceDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSpaceUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/spaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceDTOFromJSON(jsonValue));
    }

    /**
     * getSpace
     */
    async getSpaceUsingGET(requestParameters: GetSpaceUsingGETRequest): Promise<SpaceDTO> {
        const response = await this.getSpaceUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getSpacesBelongingToSpace
     */
    async getSpacesBelongingToSpaceUsingGETRaw(requestParameters: GetSpacesBelongingToSpaceUsingGETRequest): Promise<runtime.ApiResponse<Array<SpaceDTO>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSpacesBelongingToSpaceUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/spaces/{id}/spaces`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpaceDTOFromJSON));
    }

    /**
     * getSpacesBelongingToSpace
     */
    async getSpacesBelongingToSpaceUsingGET(requestParameters: GetSpacesBelongingToSpaceUsingGETRequest): Promise<Array<SpaceDTO>> {
        const response = await this.getSpacesBelongingToSpaceUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getSpaces
     */
    async getSpacesUsingGETRaw(): Promise<runtime.ApiResponse<Array<SpaceDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/spaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpaceDTOFromJSON));
    }

    /**
     * getSpaces
     */
    async getSpacesUsingGET(): Promise<Array<SpaceDTO>> {
        const response = await this.getSpacesUsingGETRaw();
        return await response.value();
    }

    /**
     * updateSpace
     */
    async updateSpaceUsingPUTRaw(requestParameters: UpdateSpaceUsingPUTRequest): Promise<runtime.ApiResponse<SpaceDTO>> {
        if (requestParameters.space === null || requestParameters.space === undefined) {
            throw new runtime.RequiredError('space','Required parameter requestParameters.space was null or undefined when calling updateSpaceUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/spaces`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SpaceDTOToJSON(requestParameters.space),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceDTOFromJSON(jsonValue));
    }

    /**
     * updateSpace
     */
    async updateSpaceUsingPUT(requestParameters: UpdateSpaceUsingPUTRequest): Promise<SpaceDTO> {
        const response = await this.updateSpaceUsingPUTRaw(requestParameters);
        return await response.value();
    }

}

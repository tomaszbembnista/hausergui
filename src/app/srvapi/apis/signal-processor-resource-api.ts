/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ProcessorOperationArgument } from '../models';
import { ProcessorOperationDesc } from '../models';
import { SignalProcessorDTO } from '../models';
/**
 * SignalProcessorResourceApi - axios parameter creator
 * @export
 */
export const SignalProcessorResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createSignalProcessor
         * @param {SignalProcessorDTO} body signalProcessor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSignalProcessorUsingPOST: async (body: SignalProcessorDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSignalProcessorUsingPOST.');
            }
            const localVarPath = `/api/signal-processors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSignalProcessor
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignalProcessorUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSignalProcessorUsingDELETE.');
            }
            const localVarPath = `/api/signal-processors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary executeSignalProcessorOperations
         * @param {Array&lt;ProcessorOperationArgument&gt;} body operationArguments
         * @param {number} id id
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSignalProcessorOperationsUsingPUT: async (body: Array<ProcessorOperationArgument>, id: number, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling executeSignalProcessorOperationsUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling executeSignalProcessorOperationsUsingPUT.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling executeSignalProcessorOperationsUsingPUT.');
            }
            const localVarPath = `/api/signal-processors/{id}/operations/{name}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSignalProcessorOperations
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignalProcessorOperationsUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSignalProcessorOperationsUsingGET.');
            }
            const localVarPath = `/api/signal-processors/{id}/operations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSignalProcessor
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignalProcessorUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSignalProcessorUsingGET.');
            }
            const localVarPath = `/api/signal-processors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSignalProcessors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignalProcessorsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/signal-processors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSignalProcessor
         * @param {SignalProcessorDTO} body space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSignalProcessorUsingPUT: async (body: SignalProcessorDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSignalProcessorUsingPUT.');
            }
            const localVarPath = `/api/signal-processors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignalProcessorResourceApi - functional programming interface
 * @export
 */
export const SignalProcessorResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createSignalProcessor
         * @param {SignalProcessorDTO} body signalProcessor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSignalProcessorUsingPOST(body: SignalProcessorDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalProcessorDTO>> {
            const localVarAxiosArgs = await SignalProcessorResourceApiAxiosParamCreator(configuration).createSignalProcessorUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteSignalProcessor
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSignalProcessorUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SignalProcessorResourceApiAxiosParamCreator(configuration).deleteSignalProcessorUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary executeSignalProcessorOperations
         * @param {Array&lt;ProcessorOperationArgument&gt;} body operationArguments
         * @param {number} id id
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSignalProcessorOperationsUsingPUT(body: Array<ProcessorOperationArgument>, id: number, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await SignalProcessorResourceApiAxiosParamCreator(configuration).executeSignalProcessorOperationsUsingPUT(body, id, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getSignalProcessorOperations
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignalProcessorOperationsUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessorOperationDesc>>> {
            const localVarAxiosArgs = await SignalProcessorResourceApiAxiosParamCreator(configuration).getSignalProcessorOperationsUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getSignalProcessor
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignalProcessorUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalProcessorDTO>> {
            const localVarAxiosArgs = await SignalProcessorResourceApiAxiosParamCreator(configuration).getSignalProcessorUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getSignalProcessors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignalProcessorsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SignalProcessorDTO>>> {
            const localVarAxiosArgs = await SignalProcessorResourceApiAxiosParamCreator(configuration).getSignalProcessorsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateSignalProcessor
         * @param {SignalProcessorDTO} body space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSignalProcessorUsingPUT(body: SignalProcessorDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalProcessorDTO>> {
            const localVarAxiosArgs = await SignalProcessorResourceApiAxiosParamCreator(configuration).updateSignalProcessorUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SignalProcessorResourceApi - factory interface
 * @export
 */
export const SignalProcessorResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary createSignalProcessor
         * @param {SignalProcessorDTO} body signalProcessor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSignalProcessorUsingPOST(body: SignalProcessorDTO, options?: any): AxiosPromise<SignalProcessorDTO> {
            return SignalProcessorResourceApiFp(configuration).createSignalProcessorUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSignalProcessor
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignalProcessorUsingDELETE(id: number, options?: any): AxiosPromise<void> {
            return SignalProcessorResourceApiFp(configuration).deleteSignalProcessorUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary executeSignalProcessorOperations
         * @param {Array&lt;ProcessorOperationArgument&gt;} body operationArguments
         * @param {number} id id
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSignalProcessorOperationsUsingPUT(body: Array<ProcessorOperationArgument>, id: number, name: string, options?: any): AxiosPromise<string> {
            return SignalProcessorResourceApiFp(configuration).executeSignalProcessorOperationsUsingPUT(body, id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSignalProcessorOperations
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignalProcessorOperationsUsingGET(id: number, options?: any): AxiosPromise<Array<ProcessorOperationDesc>> {
            return SignalProcessorResourceApiFp(configuration).getSignalProcessorOperationsUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSignalProcessor
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignalProcessorUsingGET(id: number, options?: any): AxiosPromise<SignalProcessorDTO> {
            return SignalProcessorResourceApiFp(configuration).getSignalProcessorUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSignalProcessors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignalProcessorsUsingGET(options?: any): AxiosPromise<Array<SignalProcessorDTO>> {
            return SignalProcessorResourceApiFp(configuration).getSignalProcessorsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSignalProcessor
         * @param {SignalProcessorDTO} body space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSignalProcessorUsingPUT(body: SignalProcessorDTO, options?: any): AxiosPromise<SignalProcessorDTO> {
            return SignalProcessorResourceApiFp(configuration).updateSignalProcessorUsingPUT(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignalProcessorResourceApi - object-oriented interface
 * @export
 * @class SignalProcessorResourceApi
 * @extends {BaseAPI}
 */
export class SignalProcessorResourceApi extends BaseAPI {
    /**
     * 
     * @summary createSignalProcessor
     * @param {SignalProcessorDTO} body signalProcessor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalProcessorResourceApi
     */
    public createSignalProcessorUsingPOST(body: SignalProcessorDTO, options?: any) {
        return SignalProcessorResourceApiFp(this.configuration).createSignalProcessorUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary deleteSignalProcessor
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalProcessorResourceApi
     */
    public deleteSignalProcessorUsingDELETE(id: number, options?: any) {
        return SignalProcessorResourceApiFp(this.configuration).deleteSignalProcessorUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary executeSignalProcessorOperations
     * @param {Array&lt;ProcessorOperationArgument&gt;} body operationArguments
     * @param {number} id id
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalProcessorResourceApi
     */
    public executeSignalProcessorOperationsUsingPUT(body: Array<ProcessorOperationArgument>, id: number, name: string, options?: any) {
        return SignalProcessorResourceApiFp(this.configuration).executeSignalProcessorOperationsUsingPUT(body, id, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getSignalProcessorOperations
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalProcessorResourceApi
     */
    public getSignalProcessorOperationsUsingGET(id: number, options?: any) {
        return SignalProcessorResourceApiFp(this.configuration).getSignalProcessorOperationsUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getSignalProcessor
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalProcessorResourceApi
     */
    public getSignalProcessorUsingGET(id: number, options?: any) {
        return SignalProcessorResourceApiFp(this.configuration).getSignalProcessorUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary getSignalProcessors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalProcessorResourceApi
     */
    public getSignalProcessorsUsingGET(options?: any) {
        return SignalProcessorResourceApiFp(this.configuration).getSignalProcessorsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary updateSignalProcessor
     * @param {SignalProcessorDTO} body space
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalProcessorResourceApi
     */
    public updateSignalProcessorUsingPUT(body: SignalProcessorDTO, options?: any) {
        return SignalProcessorResourceApiFp(this.configuration).updateSignalProcessorUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }
}
